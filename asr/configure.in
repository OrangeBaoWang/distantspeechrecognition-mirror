#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.57)
AC_INIT(asr, 0.4, jmcd)
AC_CONFIG_SRCDIR([train/codebookTrain.cc])
AC_CONFIG_HEADER([config.h])
AM_INIT_AUTOMAKE
AC_CANONICAL_BUILD

# Checks for programs.
AC_PROG_LIBTOOL
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_AWK
AC_PROG_EGREP
AC_PROG_LN_S

# check for SWIG
AM_PATH_PYTHON(2.3)
SWIG_PYTHON(1.3)
SWIGFLAGS="-c++ -keyword -shadow"

#AC_MSG_CHECKING([whether need libswigpy])
#if test $swig_version -lt 1324 ; then
#   AC_SUBST([SWIG_PYTHON_LIBS], ["$SWIG_PYTHON_LIBS -lswigpy"])
#   AC_MSG_RESULT([yes])
#else
#   AC_MSG_RESULT([no])
#fi
AC_SUBST([SWIGFLAGS])
save_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="$CPPFLAGS $PYTHON_CPPFLAGS"
#AC_CHECK_HEADER(
#    numpy/arrayobject.h, [],
#    [AC_MSG_ERROR(Could not find numpy headers)],
#    [#include <Python.h> ])
CPPFLAGS="$save_CPPFLAGS"

# Checks for libraries.

AC_CHECK_LIB(m, main)
AC_CHECK_LIB(util, main)

AC_ARG_WITH([atlas],
	    AC_HELP_STRING([--with-atlas=PATH], [use ATLAS version of BLAS]),
     	    [
		case $withval in
		  /*) # Absolute
			ATLAS_DIR=$withval;;
		  *)
			ATLAS_DIR=$PWD/$withval ;;
		esac
		LDFLAGS="$LDFLAGS -L$ATLAS_DIR/lib"
		CPPFLAGS="$CPPFLAGS -I$ATLAS_DIR/include"
		AC_CHECK_LIB(atlas, main,
		    [AC_CHECK_LIB(cblas, main,
		       [AC_CHECK_LIB(lapack, main, ,[AC_MSG_ERROR([cannot find ATLAS libraries.])])]
                    )],
		)
		AC_CHECK_HEADER(cblas.h, ,[AC_MSG_ERROR([cannot find cblas.h])])
		export GSL_CBLAS_LIB="-lcblas -latlas -llapack"
	    ])

# check for GSL
PKG_CHECK_MODULES(GSL, gsl >= 1.2)

# check for btk
PKG_CHECK_MODULES(BTK, btk >= 0.2)

# check for opencv
PKG_CHECK_MODULES(OPENCV, opencv >= 2.0,
    [
                        AC_DEFINE([OPENCV], [], ["Using openCV"])
                        AVCODECDEP="openCV"
    ],
    [
                        AC_MSG_WARN("Building without openCV!")
                ])

# check for fftw3
PKG_CHECK_MODULES(FFTW, fftw3 >= 3.0.0, 
    [
        AC_CHECK_LIB([fftw3_threads], [main], ,[AC_MSG_ERROR([cannot find fftw3_threads lib.])], [-lfftw3 -lpthread])
        HAVE_FFTW="yes"
        LDFLAGS="$LDFLAGS $FFTW_LIBS"
        CPPFLAGS="$CPPFLAGS $FFTW_CFLAGS"
        AC_DEFINE([HAVE_LIBFFTW3], [], [Use FFT3 libraries])
	FFTWDEP="fftw3"
    ], [HAVE_FFTW="no"])
AC_SUBST([FFTWDEP])

# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS([fcntl.h float.h limits.h malloc.h stdlib.h string.h unistd.h error.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_STAT
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([floor memset pow sqrt strchr strtoul])

AC_SUBST([SWIG_RULES], ['$(top_srcdir)/swig_rules'])
CPPFLAGS_NEW=' -I${top_srcdir} -I${srcdir} '
CPPFLAGS="$CPPFLAGS $CPPFLAGS_NEW"

AC_CONFIG_FILES([Makefile \
	         asr.pc \
		 dictionary/Makefile \
		 natural/Makefile \
		 gaussian/Makefile \
		 path/Makefile \
     fsm/Makefile \
     lattice/Makefile \
     decoder/Makefile \
     adapt/Makefile \
     train/Makefile \
     sat/Makefile \
     lib/Makefile 
		])
AC_OUTPUT
